//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Game/Scripts/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Card"",
            ""id"": ""d50e26d6-6222-46eb-9934-a7be945e6592"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9c6db4e3-5632-4844-b82b-c07804723c13"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""42d28486-d0a9-48e0-93af-d33bffd232b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f91f5804-6955-44f5-aa3e-f7033e81c309"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b827829-8c3e-456f-9889-ea999a9325a4"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Card
        m_Card = asset.FindActionMap("Card", throwIfNotFound: true);
        m_Card_PointerPosition = m_Card.FindAction("PointerPosition", throwIfNotFound: true);
        m_Card_PointerPress = m_Card.FindAction("PointerPress", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_Card.enabled, "This will cause a leak and performance issues, GameInput.Card.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Card
    private readonly InputActionMap m_Card;
    private List<ICardActions> m_CardActionsCallbackInterfaces = new List<ICardActions>();
    private readonly InputAction m_Card_PointerPosition;
    private readonly InputAction m_Card_PointerPress;
    public struct CardActions
    {
        private @GameInput m_Wrapper;
        public CardActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_Card_PointerPosition;
        public InputAction @PointerPress => m_Wrapper.m_Card_PointerPress;
        public InputActionMap Get() { return m_Wrapper.m_Card; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardActions set) { return set.Get(); }
        public void AddCallbacks(ICardActions instance)
        {
            if (instance == null || m_Wrapper.m_CardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CardActionsCallbackInterfaces.Add(instance);
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PointerPress.started += instance.OnPointerPress;
            @PointerPress.performed += instance.OnPointerPress;
            @PointerPress.canceled += instance.OnPointerPress;
        }

        private void UnregisterCallbacks(ICardActions instance)
        {
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PointerPress.started -= instance.OnPointerPress;
            @PointerPress.performed -= instance.OnPointerPress;
            @PointerPress.canceled -= instance.OnPointerPress;
        }

        public void RemoveCallbacks(ICardActions instance)
        {
            if (m_Wrapper.m_CardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICardActions instance)
        {
            foreach (var item in m_Wrapper.m_CardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CardActions @Card => new CardActions(this);
    public interface ICardActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnPointerPress(InputAction.CallbackContext context);
    }
}
